# https://taskfile.dev

version: "3"

includes:
  utils:
    taskfile: ../utils
    internal: true

tasks:
  create-cluster:
    silent: true
    aliases: [up]
    run: once
    status:
      - k3d cluster get k3s-default
    cmds:
      - |
        gum spin --show-error --title="Starting k3d cluster..." -- \
          k3d cluster create \
            --registry-create registry.localhost:5000 \
            --image rancher/k3s:v1.30.1-k3s1 \
            --k3s-arg "--disable=traefik@server:*" \
            --k3s-arg "--disable=metrics-server@server:*"
      - |
        gum spin --show-error --title="Waiting for coredns to be available..." -- \
          kubectl wait --for=condition=available deployment/coredns --namespace kube-system

      - task: utils:log
        vars: { MESSAGE: "k3d cluster started" }

  delete-cluster:
    silent: true
    aliases: [down]
    cmds:
      - gum spin --show-error --title="Deleting k3d cluster..." -- k3d cluster delete

  deploy:
    silent: true
    deps:
      - task: create-cluster
    vars:
      SELECTED_SERVICES:
        sh: '{{if empty .SERVICES}}ls kubernetes | gum filter --fuzzy --no-limit --header="Which services would you like to apply?" {{end}}'

      SERVICES: "{{.SERVICES | default .SELECTED_SERVICES}}"

    cmds:
      - task: utils:log
        vars: { MESSAGE: 'Deploying {{.SERVICES | splitList "\n"}}' }
      - for: { var: SERVICES }
        task: apply
        vars:
          MANIFESTS: "kubernetes/{{.ITEM}}"
      - task: utils:log
        vars: { MESSAGE: "All services deployed" }

  apply:
    silent: true
    deps:
      - task: create-cluster
    requires:
      vars: [MANIFESTS]
    sources:
      - "{{.MANIFESTS}}/*.yaml"
    cmds:
      - cmd: gum spin --show-error --title="Applying {{.MANIFESTS}} ..." -- kubectl apply -f <(kubectl kustomize --enable-helm {{.MANIFESTS}})
      - task: utils:log
        vars: { MESSAGE: "{{.MANIFESTS}} applied" }

  logs: while true; do kubectl -n echo-server logs -f deployment/echo-server ; done

  call:
    silent: true
    vars:
      ENDPOINT:
        sh: "kubectl -n echo-server get svc/echo-server --output=jsonpath='{.status.loadBalancer.ingress[0].ip}'"
    cmds:
      - cmd: task call MESSAGE="hello from k8s" ENDPOINT={{.ENDPOINT}}

  notrouble:
    silent: true
    vars:
      KUBENT_RUN:
        sh: echo "kubent-$(date -Idate)"
    cmds:
      - kubectl create ns {{.KUBENT_RUN}}
      - defer: kubectl delete ns {{.KUBENT_RUN}}

      - kubectl create clusterrolebinding {{.KUBENT_RUN}} --serviceaccount {{.KUBENT_RUN}}:default --clusterrole=cluster-admin
      - defer: kubectl delete clusterrolebinding {{.KUBENT_RUN}}

      - kubectl run kubent -n {{.KUBENT_RUN}} --attach --rm --image ghcr.io/doitintl/kube-no-trouble -- {{.CLI_ARGS}}
