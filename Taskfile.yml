# https://taskfile.dev

version: "3"

includes:
  k8s: tasks/k8s
  utils:
    taskfile: tasks/utils
    internal: true

interval: 20ms

dotenv: [".env"]

tasks:
  default: task --list

  vet: go vet ./...
  fmt: go fmt ./...

  bootstrap:
    desc: "Install any dependencies required. (Hint: run this first)"
    summary: |
      This task will install all dependencies required to build, test and run this project.
      Some dependencies are implied but are still checked by this task.
    cmds:
      - task: utils:bootstrap

  test:
    desc: "Runs all the project's tests."
    sources:
      - "**/*.go"
    cmds:
      - go test ./...

  build:
    desc: "Builds the echo-server."
    summary: |
      Uses the go compiler to build the echo-server.

      This task is setup using the `sources` and `generates` fields which means
      that this task can dynamically rebuild if any of the files in `sources`
      change.

      To make use of this feature run this, or any task that depends on this
      task, with `--watch`.
    sources:
      - "**/*.go"
    generates:
      - ./bin/echo-server
    env:
      CGO_ENABLED: "0"
    cmds:
      - go build -o ./bin/echo-server ./cmd/echo-server/

  server:
    desc: "Builds and starts the echo-server."
    summary: |
      Simply runs the pre-built echo-server binary. It depends on the `build` task
      which means that it will make sure the `build` task sucessfully completes
      before starting the server.

      It also means that it inherits the watch behaviour of that build task.
      Run this task with the `--watch` flag and change a `*.go` file to see the
      effects.
    aliases: [start]
    deps:
      - task: build
    cmds:
      - ./bin/echo-server

  call:
    silent: true
    vars:
      ENDPOINT: '{{.ENDPOINT | default "localhost:8080"}}'
      MESSAGE: '{{.MESSAGE | default "ðŸ™ˆðŸ™‰ðŸ™Š"}}'
      JSON_MESSAGE: '{ "message": {{ .MESSAGE | quote }} }'
      MESSAGE_FILE:
        sh: "mktemp"
    cmds:
      - echo {{.JSON_MESSAGE | quote}} > {{.MESSAGE_FILE}}
      - defer: rm {{.MESSAGE_FILE}}
      - curl -si http://{{.ENDPOINT}}/echo -d @{{.MESSAGE_FILE}}

  clean:
    silent: true
    ignore_error: true
    vars:
      ITEMS_TO_CLEAN: ["./bin", "./tmp", "./.task"]
    prompt: "Delete the following items? {{.ITEMS_TO_CLEAN}}"
    cmds:
      - for:
          var: ITEMS_TO_CLEAN
        cmd: rm -rv {{.ITEM}}

  sync:
    silent: true
    deps:
      - task: build
      - task: k8s:create-cluster
    vars:
      BINARY_CHECKSUM:
        sh: "sha1sum ./bin/echo-server | cut -d ' ' -f 1"

      IMAGE_NAME: "localhost:5000/echo-server"
      IMAGE_TAG: '{{.IMAGE_NAME}}:{{.BINARY_CHECKSUM | default "latest"}}'

    sources:
      - "./bin/echo-server"
      - "Dockerfile"

    cmds:
      # build and push the container image
      - gum spin --show-error --title="Building image {{.IMAGE_TAG}} ..." -- docker build --tag {{.IMAGE_TAG}} ./
      - task: utils:log
        vars: { MESSAGE: "Container image {{.IMAGE_TAG}} built" }

      - gum spin --show-error --title="Pushing image {{.IMAGE_TAG}} ..." -- docker push {{.IMAGE_TAG}}
      - task: utils:log
        vars: { MESSAGE: "Container image {{.IMAGE_TAG}} pushed" }

      # make sure all the resources have been created and update the image tag in the cluster
      - task: k8s:apply
        vars: { MANIFESTS: "kubernetes/echo-server" }
      - kubectl -n echo-server set image deployment/echo-server echo-server=registry.{{.IMAGE_TAG}}

  down:
    cmds:
      - task: k8s:delete-cluster
      - task: clean
